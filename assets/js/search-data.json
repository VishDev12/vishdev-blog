{
  
    
        "post0": {
            "title": "Automating AWS AMI Creation",
            "content": "This article briefly delves into Hashicorp Packer and what it can do for your AMI creation workflow. . Setting up an AMI is a well-defined process that usually follows these steps: . Launch an instance from an existing AMI, private or public. . | SSH into the instance. . | Execute a series of commands to configure it. . | Stop the instance. . | Create an AMI from the instance. . | Terminate the instance. . | If you need the AMI in a different region or account, do a manual copy operation or explicitly grant rights to a different account. . | Repeat steps 1-7 whenever you need a change in the AMI. . | Since AMI creation is such an involved and lengthy process, we might sometimes prefer to have an initialization script that runs every time an instance is launched with the AMI and have the script configure the instance with the latest updates to suit our needs. This renders the launched instance unusable for a period of time until the configuration process is complete and might even contribute to higher costs if the workloads are short-lived. . Justifiably, these costs might be more than acceptable considering the alternative, which would be having to follow the lengthy workflow laid out above every time you need your AMI updated. . But what if we could automate this process and treat AMI creation like a git push or a simple configuration change? . Enter Packer. . Packer automates every step in the AMI creation workflow using a JSON template that you define, which means that your workflow for setting up an AMI will now look like this: . 1. Create a JSON template. 2. packer validate template.json 3. packer build template.json . When you need to update the AMI, modify your template to make the changes you need, and run steps 2 and 3. . The Packer documentation is comprehensive and can be found here and a tutorial can be found here. But in order to get a quick intuition of what Packer can do, let’s explore a simple example. . Example Use Case . You need to build an AMI with the following properties: . You have a series of existing AMIs that all start with the prefix sample_ami_v_. You will also be following this naming guideline for your new AMI. Versioning the AMI names with predictable prefixes allows you to filter them programmatically. . | The redis-server apt package needs to be added to the AMI. . | The AMI needs to be available in the us-east-1 region primarily, and additionally in the ap-southeast-1 and ap-south-1 regions. . | The AMIs should be accessible from a different AWS account with the account ID: 123456789123. | . JSON Template . { &quot;variables&quot;: { &quot;aws_access_key&quot;: &quot;&quot;, &quot;aws_secret_key&quot;: &quot;&quot; }, &quot;builders&quot;: [ { &quot;type&quot;: &quot;amazon-ebs&quot;, &quot;access_key&quot;: &quot;&quot;, &quot;secret_key&quot;: &quot;&quot;, &quot;region&quot;: &quot;us-east-1&quot;, &quot;source_ami_filter&quot;: { &quot;filters&quot;: { &quot;name&quot;: &quot;sample_ami_v_*&quot; }, &quot;owners&quot;: [&quot;987654321987&quot;], &quot;most_recent&quot;: true }, &quot;instance_type&quot;: &quot;t2.medium&quot;, &quot;ssh_username&quot;: &quot;ubuntu&quot;, &quot;ami_name&quot;: &quot;sample_ami_v_&quot;, &quot;run_tags&quot;: { &quot;Name&quot;: &quot;ami_creator&quot; }, &quot;ami_regions&quot;: [&quot;ap-southeast-1&quot;, &quot;ap-south-1&quot;], &quot;ami_users&quot;: [&quot;123456789123&quot;] } ], &quot;provisioners&quot;: [ { &quot;type&quot;: &quot;shell&quot;, &quot;inline_shebang&quot;: &quot;/bin/bash -e&quot;, &quot;inline&quot;: [&quot;sudo apt install redis-server&quot;] } ] } . Breakdown . Packer uses the AWS access key and the secret key to access and provision AWS resources. Set environment variables on the command line and define them inside variables; they can be now be accessed in your template as user variables. | . | After determining an appropriate AMI by using builders -&gt; source_ami_filter, an instance is launched in “us-east-1” (builders -&gt; region). A temporary security group and key pair are created. | The security group allows access to port 22 (SSH). | The tags specified under builders -&gt; run_tags are added to the launched instance. | . | Packer connects to the instance using SSH and executes the commands defined under provisioners -&gt; inline. The output of these commands will be displayed on your console. | The -e flag is used when defining provisioners -&gt; inline_shebang to ensure that errors caused by the commands will trigger the failure of the build process, which prevents your AMIs from being silently built with something that’s not according to your specifications. | . | Once that’s done, the instance is stopped, and an AMI (named builders -&gt; ami_name) is created using the stopped instance. This might take a few minutes. | . | The newly created AMI is then copied over to the regions specified under builders -&gt; ami_regions. . | Once the copies are done, permissions are granted to these AMIs for the users specified under builders -&gt; ami_users. So in this case, we will end up with three AMIs across three different regions and each of those AMIs will be available to two AWS accounts – the original user and user “123456789123”. | . | The final step is clean-up. The launched instance is terminated. | The temporary security group and key pair are deleted. | . | . Summary . Thus, with a bit of initial setup, Packer automates the entire AMI build process. Here are some take-aways and points to note: . The configuration of the launched instance can be as simple as installing a single package, as in the example above, or as complex as running an Ansible Playbook. You can find a list of provisioners that you can use to configure your instance here. . | Commit your packer templates to your code repository to help you version your changes. If possible, have a folder set aside for Packer templates and have one copy for each version of the template there (v1, v2, v3, etc) to give yourself a clear overview of the changes being added to your AMI over time. | . | Use builders -&gt; ami_description to describe the changes you’re making to the AMI. . | Packer only creates your AMIs and in no way manages them. So it’s important to keep this in mind when setting up an automated pipeline using Packer, especially if you’re specifying availability for multiple regions. Over time, these AMIs might invisibly add up in the background, contributing to higher costs. . | You can have multiple builders in a single template, which allows you to define different AMIs in a single file. You can use this feature to create AMIs for multiple platforms at the same time. An example can be found here. | .",
            "url": "https://krvdev.com/vishdev-blog/aws/ec2/hashicorp/packer/2020/08/09/automate-ami-creation.html",
            "relUrl": "/aws/ec2/hashicorp/packer/2020/08/09/automate-ami-creation.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://krvdev.com/vishdev-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://krvdev.com/vishdev-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://krvdev.com/vishdev-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://krvdev.com/vishdev-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}